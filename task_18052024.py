# Было:
# def censure(text, censured_words):
#     new_text = ""
#     for word in censured_words:
#         start_index = text.find(word)
#         end_index = start_index + len(word)
#
#         if text.find(word) != -1:
#             first_section = text[:start_index]
#             second_section = text[end_index:]
#             new_text = first_section + second_section
#
#     return new_text
#
#
# Стало:


def censure(text, censured_words):
    for word in censured_words:
        while True:
            start_index = text.lower().find(word.lower())
            if start_index == -1:
                break
            end_index = start_index + len(word)
            first_section = text[:start_index]
            second_section = text[end_index:]
            text = first_section + second_section

    return text

print("Дополнительное задание (исправление функции censure).")
print("При поиске не учитываются пересечения. Поиск пересечений реализован в задании 1 ниже.")
print("********************************************************")
text_no_meaning = "Нас провеРки также 111 существен111 Проверки и 2222 представляет!!! Поз111воляет особенности 333 требуют."
keys = ["111", "2222", "333", "пРоверки"]
print(text_no_meaning)
print(keys)
print(censure(text_no_meaning, keys))


print("********************************************************")
print("Задание 1.")
print("Пользователь вводит с клавиатуры некоторый текст, после чего пользователь вводит список зарезервированных слов.")
print("Необходимо найти в тексте все зарезервированные слова и изменить их регистр на верхний.")
print("Вывести на экран измененный текст.")
print("Если хотите вводить текст и зарезервированные слова с клавиатуры, закомментируйте код с присвоением значений text и words, затем снимите комментарий с кода для ввода с клавиатуры.")
print("********************************************************")


def replace_keys_upper_with_intersection(text1, words1):
    length = len(text1)
    if length == 0 or len(words) == 0:
        return text1
    for word1 in words1:
        i = 0
        while i < length:
            temp1 = text1[:i]
            temp2 = text1[i:]
            start_index = temp2.lower().find(word1.lower())
            if start_index == -1:
                break
            end_index = start_index + len(word1)
            first_section = temp2[:start_index]
            second_section = temp2[end_index:]
            text1 = temp1 + first_section + word1.upper() + second_section
            i += 1

    return text1


text = "8-го сентября в сарай к пленным вошел очень важный офицер панпанпан, судя по почтительности, с которою с ним обращались караульные. Офицер этот, вероятно штабный, с списком в руках, сделал перекличку всем русским, назвав Пьера: celui qui n’avoue pas son nom. И равнодушно, и лениво оглядев всех пленных, он приказал караульному офицеру прилично одеть и прибрать их, прежде чем вести к маршалу. Через час прибыла рота солдат, и Пьера с другими 13-ю повели на Девичье поле. День был ясный, солнечный после дождя, и воздух был необыкновенно чист. Дым не стлался низом, как в тот день, когда Пьера вывели из гауптвахты Зубовского вала; дым поднимался столбами в чистом воздухе. Огня пожаров нигде не было видно, но со всех сторон поднимались столбы дыма, и вся Москва, всё, что только мог видеть Пьер, было одно пожарище. Со всех сторон виднелись пустыри, с печами и трубами, и изредка обгорелые стены каменных домов. Пьер приглядывался к пожарищам и не узнавал знакомых кварталов города. Кое-где виднелись уцелевшие церкви. Кремль, неразрушенный, белел издалека с своими башнями и Иваном Великим. Вблизи весело блестел купол Новодевичьего монастыря, и особенно-звонко слышался оттуда благовест. Благовест этот напомнил Пьеру, что было воскресенье и праздник Рождества Богородицы. Но казалось, некому было праздновать этот праздник: везде было разоренье пожарища, и из русского народа встречались только изредка оборванные, испуганные люди, которые прятались при виде французов."
words = ["плен", "пожар", "пьер", "француз", "панпан"]


# text = input("Введите текст:")
# print("Введите зарезервированные слова. Для завершения ввода нажмите Enter.")
# words = []
# while True:
#     word = input("Зарезервированное слово: ")
#     if word.strip() == "":
#         break
#     words.append(word)

print("Вы ввели текст:")
print(text)
print(f"Вы ввели зарезервированные слова: {words}")
print("Регистр зарезервированных слов изменен на верхний.")
print(replace_keys_upper_with_intersection(text, words))


print("********************************************************")
print("Задание 2.")
print("Есть некоторый текст. Посчитайте в этом тексте количество предложений и выведите на экран полученный результат.")
print("********************************************************")
text_news = "         Мероприятие пройдет в столице 18 мая...Компания VK организует для гостей и участников ряд активностей. Какой восторг!!! Так, в диджитал-зоне VK можно совершить заезд на велосимуляторе, узнать максимальную скорость и выиграть призы, подготовиться к заезду и отдохнуть после него в лаунж-пространстве, а также сделать фото и получить их по предварительной регистрации в мини-приложении велофестиваля. Детям всё бесплатно?!! "


def text_by_sents(text):
    sents = list()
    length = len(text)
    if length == 0:
        return 0
    i = 0
    order = 0
    sent = ""
    while i < length:
        if text[i] in ".!?":
            if i == 0:
                i += 1
                sent += text[i]
                continue
            sent += text[i]
            order += 1
            if i == length - 1:
                sents.append(sent)
                sent = ""
            i += 1
            continue
        if order != 0:
            order = 0
            sents.append(sent)
            sent = text[i]
            i += 1
            continue
        sent += text[i]
        i += 1

    return sents


print(text_news)
parts = text_by_sents(text_news)
print(f"Текст разбит на предложения: {parts}")
print(f"Количество предложений: {len(parts)}")
