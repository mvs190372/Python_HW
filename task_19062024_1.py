# ПРОДВИНУТАЯ РАБОТА С ФУНКЦИЯМИ
#   ==========  1  ==========
# Написать функцию с именем pick_resistors, которая подбирает ближайшие к переданному номиналы
# сопротивления из всех рядов сопротивлений.
# В электротехнике и электронике существует понятие разброса значения сопротивления резистора от номинала.
# Результатом этого явилось существование рядов номиналов резисторов, изготавливаемых с различной точностью:
# от ±20% до ±0.5%
#     Подробнее здесь: https://digteh.ru/PCB/R/Nominal/
# Необходимо для некоторого (заранее рассчитанного) значения сопротивления подобрать ближайший номинал
# из каждого ряда сопротивлений. Под ближайшими подразумеваются тот или те номиналы, разница которых
# с переданным значением сопротивления минимальна.
# Ряды номиналов, среди которых необходимо осуществить подбор, заданы в словаре в приложенном к заданию
# файле ref 1.py.
# Функция принимает обязательным позиционно-ключевым аргументом целое число — значение сопротивления в
# диапазоне от 100 до 999 включительно.
# Функция возвращает словарь или None.
#
#     Ключи словаря:
#         'Е6', 'Е12', 'Е24', 'Е48', 'Е96'
#
#     Значения словаря должны быть объектами tuple.
#     В каждом кортеже должен быть один или больше объектов int — подобранные номиналы сопротивлений.
#
# В данной задаче необходимо использовать встроенные функции высшего порядка map() и filter().
# Для этих функций в свою очередь понадобится написать подходящие анонимные функции.
#
# Примечание: не забывайте про встроенные функции abs() и min()
#
# Написанную функцию необходимо протестировать вручную.
# Пример ручного теста:
#     >>> pick_resistors(112)
#     {'E6': (100,), 'E12': (120,), 'E24': (110,), 'E48': (110,), 'E96': (113,)}
#     >>>
#     >>> pick_resistors(549)
#     {'E6': (470,), 'E12': (560,), 'E24': (560,), 'E48': (536, 562), 'E96': (549,)}
import os
import openpyxl


# Загрузка данных из справочника
E192 = []
E96 = []
E48 = []
E24 = []
E12 = []
E6 = []
wb = openpyxl.load_workbook(os.getcwd()+'\\res_19062024.xlsx')
sheet = wb["Лист1"]
i = 1
while True:
    i += 1
    if sheet[f"A{i}"].value is None:
        break
    E192.append(sheet[f"A{i}"].value)
    if sheet[f"B{i}"].value is not None:
        E96.append(sheet[f"B{i}"].value)
    if sheet[f"C{i}"].value is not None:
        E48.append(sheet[f"C{i}"].value)
    if sheet[f"D{i}"].value is not None:
        E24.append(sheet[f"D{i}"].value)
    if sheet[f"E{i}"].value is not None:
        E12.append(sheet[f"E{i}"].value)
    if sheet[f"F{i}"].value is not None:
        E6.append(sheet[f"F{i}"].value)

# print(E192)
# print(E96)
# print(E48)
# print(E24)
# print(E12)
# print(E6)


def pick_resistors(r: int) -> dict:
    '''
    Принимает значение сопротивления от 100 до 999, возвращает ближайшие номиналы
    из каждого ряда сопротивлений.
    '''
    if r >= 100 and r <= 999:
        return {"E6": tuple(filter(lambda x: abs(x-r) == min(list(map(lambda y: abs(y-r), E6))), E6)),
                "E12": tuple(filter(lambda x: abs(x-r) == min(list(map(lambda y: abs(y-r), E12))), E12)),
                "E24": tuple(filter(lambda x: abs(x-r) == min(list(map(lambda y: abs(y-r), E24))), E24)),
                "E48": tuple(filter(lambda x: abs(x-r) == min(list(map(lambda y: abs(y-r), E48))), E48)),
                "E96": tuple(filter(lambda x: abs(x-r) == min(list(map(lambda y: abs(y-r), E96))), E96)),}
    else:
        return {"Error": "недопустимое значение сопротивления"}


print(pick_resistors(112))
print(pick_resistors(549))
print(pick_resistors(50))


#  =========================
# Одна задача — один файл. Имя файла: <номер_задачи>.py
# Каждая функция должна быть документирована, её параметры и возвращаемое значение должны быть аннотированы.
# Работа функций проверяется в режиме инспекции файла с кодом.
# Ввод и вывод в стандартные потоки результатов проверки копируются.
# Копия в виде комментария помещается в конец файла с кодом задачи.
# Файлы с кодом упаковываются в архив. Имя файла архива: <фамилия>.zip|rar|7z|...

"""
>>> pick_resistors(112)
{'E6': (100,), 'E12': (120,), 'E24': (110,), 'E48': (110,), 'E96': (113,)}
>>> pick_resistors(549)
{'E6': (470,), 'E12': (560,), 'E24': (560,), 'E48': (536, 562), 'E96': (549,)}
>>> pick_resistors(50)
{'Error': 'недопустимое значение сопротивления'}
>>>
"""

